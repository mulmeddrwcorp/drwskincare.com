generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reseller {
  id             String           @id @default(cuid())
  apiResellerId  String           @unique
  nomorHp        String?          @unique
  status         String           @default("active")
  joinDate       DateTime         @default(now())
  clerk_user_id  String?          @unique
  // Clerk-synced basic profile fields (optional) â€” kept on Reseller for fast lookup
  email_address  String?
  photo_url      String?
  // Raw API payload (keep all original API fields easily accessible)
  apiData        Json?
  // Track when the last API sync ran for this reseller
  last_api_sync_at DateTime?

  // relations
  profile        ResellerProfile?
  clickLogs      ClickLog[]
  hargaCustom    HargaCustom[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("resellers")
}

model ResellerProfile {
  id              String   @id @default(cuid())
  resellerId      String   @unique
  reseller        Reseller @relation(fields: [resellerId], references: [id], onDelete: Cascade)

  // user-editable / Clerk-synced fields (snake_case)
  email_address   String?
  nama_reseller   String?
  whatsapp_number String?
  photo_url       String?
  city            String?
  bio             String?
  // Fields observed in external reseller API
  nomor_hp        String?
  area            String?
  facebook        String?
  instagram       String?
  alamat          String?
  provinsi        String?
  kabupaten       String?
  kecamatan       String?
  bank            String?
  rekening        String?
  level           String?
  // Store raw API payload for any additional keys
  apiData         Json?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // When the user last edited this profile manually via the dashboard
  last_user_update DateTime?

  @@map("reseller_profiles")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id              String        @id @default(cuid())
  deskripsi       String?
  gambar          String?
  apiData         Json?
  // For bundling items or other API-provided lists
  items           Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bpom            String?
  fotoProduk      String?
  hargaConsultant Decimal?
  hargaDirector   Decimal?
  hargaManager    Decimal?
  hargaSupervisor Decimal?
  hargaUmum       Decimal?
  idProduk        String        @unique
  namaProduk      String
  categoryId      String?
  slug            String        @unique
  isBundling      Boolean       @default(false)
  apiBundlingId   String?       @unique
  isVisible       Boolean       @default(true)
  hargaCustom     HargaCustom[]
  category        Category?     @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model HargaCustom {
  id          String   @id @default(cuid())
  resellerId  String
  productId   String
  hargaCustom Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  reseller    Reseller @relation(fields: [resellerId], references: [id], onDelete: Cascade)

  @@unique([resellerId, productId])
  @@map("harga_custom")
}

model ClickLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  resellerId String
  productId  String?
  ipAddress  String?
  referrer   String?
  userAgent  String?
  reseller   Reseller @relation(fields: [resellerId], references: [id], onDelete: Cascade)

  @@map("click_logs")
}
