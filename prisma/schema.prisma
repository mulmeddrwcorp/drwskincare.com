generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reseller {
  id            String           @id @default(cuid())
  apiData       Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  area          String
  idUpline      String?
  level         String
  namaReseller  String
  nomorHp       String
  apiResellerId String           @unique
  email         String?
  joinDate      DateTime         @default(now())
  status        String           @default("active")
  clickLogs     ClickLog[]
  hargaCustom   HargaCustom[]
  profile       ResellerProfile?

  @@map("resellers")
}

model ResellerProfile {
  id             String   @id @default(cuid())
  displayName    String?
  whatsappNumber String?
  photoUrl       String?
  city           String?
  bio            String?
  facebook       String?
  instagram      String?
  isPublic       Boolean  @default(true)
  customSlug     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  resellerId     String   @unique
  reseller       Reseller @relation(fields: [resellerId], references: [id], onDelete: Cascade)

  @@map("reseller_profiles")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id              String        @id @default(cuid())
  deskripsi       String?
  gambar          String?
  apiData         Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bpom            String?
  fotoProduk      String?
  hargaConsultant Decimal?
  hargaDirector   Decimal?
  hargaManager    Decimal?
  hargaSupervisor Decimal?
  hargaUmum       Decimal?
  idProduk        String        @unique
  namaProduk      String
  categoryId      String?
  slug            String        @unique
  isBundling      Boolean       @default(false)
  apiBundlingId   String?       @unique
  isVisible       Boolean       @default(true)
  hargaCustom     HargaCustom[]
  category        Category?     @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model HargaCustom {
  id          String   @id @default(cuid())
  resellerId  String
  productId   String
  hargaCustom Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  reseller    Reseller @relation(fields: [resellerId], references: [id], onDelete: Cascade)

  @@unique([resellerId, productId])
  @@map("harga_custom")
}

model ClickLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  resellerId String
  productId  String?
  ipAddress  String?
  referrer   String?
  userAgent  String?
  reseller   Reseller @relation(fields: [resellerId], references: [id], onDelete: Cascade)

  @@map("click_logs")
}
